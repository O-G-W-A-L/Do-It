# Generated by Django 5.2 on 2025-10-20 15:25

import datetime
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0002_alter_course_slug'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalyticsDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dashboard_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('dashboard_type', models.CharField(choices=[('student', 'Student Dashboard'), ('instructor', 'Instructor Dashboard'), ('admin', 'Admin Dashboard'), ('custom', 'Custom Dashboard')], max_length=20)),
                ('config', models.JSONField(default=dict, help_text='Dashboard layout and widget configuration')),
                ('widgets', models.JSONField(default=list, help_text='Dashboard widgets configuration')),
                ('is_public', models.BooleanField(default=False)),
                ('is_default', models.BooleanField(default=False)),
                ('last_viewed', models.DateTimeField(blank=True, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('metric_type', models.CharField(choices=[('active_users', 'Active Users'), ('new_users', 'New Users'), ('returning_users', 'Returning Users'), ('user_engagement', 'User Engagement Score'), ('course_enrollments', 'Course Enrollments'), ('course_completions', 'Course Completions'), ('course_completion_rate', 'Course Completion Rate'), ('average_course_duration', 'Average Course Duration'), ('lesson_completions', 'Lesson Completions'), ('quiz_attempts', 'Quiz Attempts'), ('quiz_pass_rate', 'Quiz Pass Rate'), ('assignment_submissions', 'Assignment Submissions'), ('total_revenue', 'Total Revenue'), ('average_transaction', 'Average Transaction Value'), ('subscription_revenue', 'Subscription Revenue'), ('course_revenue', 'Course Revenue'), ('time_spent_learning', 'Time Spent Learning'), ('daily_active_users', 'Daily Active Users'), ('session_duration', 'Average Session Duration'), ('feature_usage', 'Feature Usage')], max_length=50)),
                ('aggregation_period', models.CharField(choices=[('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='daily', max_length=20)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('value', models.DecimalField(decimal_places=4, max_digits=20)),
                ('value_type', models.CharField(default='count', max_length=50)),
                ('filters', models.JSONField(default=dict, help_text='Applied filters (course, user group, etc.)')),
                ('calculated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_points', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-period_start', 'metric_type'],
                'indexes': [models.Index(fields=['metric_type', 'period_start'], name='analytics_a_metric__692040_idx'), models.Index(fields=['aggregation_period', 'period_start'], name='analytics_a_aggrega_3848e5_idx'), models.Index(fields=['period_start'], name='analytics_a_period__c82673_idx')],
                'unique_together': {('metric_type', 'aggregation_period', 'period_start', 'filters')},
            },
        ),
        migrations.CreateModel(
            name='AnalyticsReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('report_type', models.CharField(choices=[('user_engagement', 'User Engagement Report'), ('course_performance', 'Course Performance Report'), ('revenue_analytics', 'Revenue Analytics Report'), ('learning_outcomes', 'Learning Outcomes Report'), ('platform_health', 'Platform Health Report'), ('custom', 'Custom Report')], max_length=50)),
                ('config', models.JSONField(default=dict, help_text='Report configuration (filters, metrics, etc.)')),
                ('is_scheduled', models.BooleanField(default=False)),
                ('schedule_frequency', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], max_length=20)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('last_generated', models.DateTimeField(blank=True, null=True)),
                ('generation_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allowed_users', models.ManyToManyField(blank=True, related_name='accessible_reports', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataExport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('export_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('export_type', models.CharField(choices=[('user_data', 'User Data Export'), ('analytics_data', 'Analytics Data Export'), ('compliance_report', 'Compliance Report'), ('research_data', 'Research Data Export')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('filters', models.JSONField(default=dict, help_text='Data filters applied')),
                ('fields', models.JSONField(default=list, help_text='Fields to export')),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_format', models.CharField(choices=[('csv', 'CSV'), ('json', 'JSON'), ('xlsx', 'Excel')], default='csv', max_length=10)),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('record_count', models.PositiveIntegerField(default=0)),
                ('is_anonymized', models.BooleanField(default=True)),
                ('retention_period', models.DurationField(default=datetime.timedelta(days=30))),
                ('gdpr_compliant', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('requested_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_exports', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_exports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('recommendation_type', models.CharField(choices=[('course_suggestion', 'Course Suggestion'), ('skill_building', 'Skill Building'), ('practice_exercise', 'Practice Exercise'), ('review_material', 'Review Material'), ('peer_learning', 'Peer Learning'), ('career_path', 'Career Path')], max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('action_url', models.URLField(blank=True)),
                ('action_text', models.CharField(blank=True, max_length=100)),
                ('reasoning', models.JSONField(default=dict, help_text='AI/ML reasoning for this recommendation')),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0.5, max_digits=3)),
                ('related_skill', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('dismissed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('related_course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.course')),
                ('related_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.lesson')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at', '-priority'],
            },
        ),
        migrations.CreateModel(
            name='PredictiveInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('insight_type', models.CharField(choices=[('at_risk_student', 'At-Risk Student'), ('course_completion_prediction', 'Course Completion Prediction'), ('skill_gap_identification', 'Skill Gap Identification'), ('engagement_trend', 'Engagement Trend'), ('performance_anomaly', 'Performance Anomaly'), ('churn_risk', 'Churn Risk')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('confidence_score', models.DecimalField(decimal_places=2, default=0.5, max_digits=3)),
                ('impact_score', models.DecimalField(decimal_places=2, default=0.5, max_digits=3)),
                ('insight_data', models.JSONField(default=dict, help_text='Detailed insight data')),
                ('reasoning', models.JSONField(default=dict, help_text='AI/ML reasoning')),
                ('recommended_actions', models.JSONField(default=list, help_text='Suggested actions')),
                ('is_active', models.BooleanField(default=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('related_course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
                ('related_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_insights', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at', '-severity'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('event_type', models.CharField(choices=[('user_login', 'User Login'), ('user_logout', 'User Logout'), ('profile_update', 'Profile Update'), ('password_change', 'Password Change'), ('course_view', 'Course View'), ('course_enroll', 'Course Enrollment'), ('course_complete', 'Course Completion'), ('course_drop', 'Course Drop'), ('lesson_start', 'Lesson Start'), ('lesson_complete', 'Lesson Complete'), ('quiz_attempt', 'Quiz Attempt'), ('quiz_complete', 'Quiz Complete'), ('assignment_submit', 'Assignment Submit'), ('milestone_achieved', 'Milestone Achieved'), ('streak_achieved', 'Streak Achieved'), ('skill_learned', 'Skill Learned'), ('payment_initiated', 'Payment Initiated'), ('payment_completed', 'Payment Completed'), ('payment_failed', 'Payment Failed'), ('subscription_created', 'Subscription Created'), ('subscription_cancelled', 'Subscription Cancelled'), ('notification_sent', 'Notification Sent'), ('notification_delivered', 'Notification Delivered'), ('notification_read', 'Notification Read'), ('error_occurred', 'Error Occurred'), ('performance_metric', 'Performance Metric'), ('api_call', 'API Call')], max_length=50)),
                ('session_id', models.CharField(blank=True, max_length=255)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('related_objects', models.JSONField(default=dict, help_text='Related courses, lessons, quizzes, etc.')),
                ('event_data', models.JSONField(default=dict, help_text='Additional event-specific data')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('source', models.CharField(default='web', max_length=100)),
                ('version', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analytics_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['event_type', 'timestamp'], name='analytics_a_event_t_64745b_idx'), models.Index(fields=['user', 'timestamp'], name='analytics_a_user_id_5c8c13_idx'), models.Index(fields=['timestamp'], name='analytics_a_timesta_aef2a5_idx'), models.Index(fields=['event_type', 'user'], name='analytics_a_event_t_dd7f57_idx')],
            },
        ),
    ]
